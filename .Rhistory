c(ylo[i], ylo[i + 1.], yhi[i + 1.], yhi[i]), col = col, border = FALSE)
}
}
plotdens <- function(X, npts = 200, range = 1.5, xlab = "", ylab = "", main = "", ...)
{
dens <- density(X, n = npts)
qu <- quantile(X, c(0., 0.25, 0.5, 0.75, 1.))
x <- dens$x
y <- dens$y
fqux <- x[abs(x - qu[2.]) == min(abs(x - qu[2.]))]
fquy <- y[x == fqux]
fquX <- as.numeric(qu[2.])
tqux <- x[abs(x - qu[4.]) == min(abs(x - qu[4.]))]
tquy <- y[x == tqux]
tquX <- as.numeric(qu[4.])
medx <- x[abs(x - qu[3.]) == min(abs(x - qu[3.]))]
medy <- y[x == medx]
## Prepare les donnees a dessiner
medX <- as.numeric(qu[3.])
dx <- dens$x
dy <- dens$y
dx2 <- c(dx[dx <= fquX], fquX, dx[(dx > fquX) &
(dx <= medX)], medX, dx[(dx > medX) & (dx <= tquX)], tquX, dx[dx > tquX])
dy2 <- 	c(dy[dx <= fquX], fquy, dy[(dx > fquX) & (dx <= medX)], medy,
dy[(dx > medX) & (dx <= tquX)], tquy, dy[dx > tquX])
IQX <- dx2[(dx2 >= fquX) & (dx2 <= tquX)]
##
##
## Initialise le graphique
##
## Dessine la densite
IQy <- dy2[(dx2 >= fquX) & (dx2 <= tquX)]
## Trace densit sous IQ
plot(0., 0., xlim = c(min(dx2), max(dx2)), ylim = c(min(dy2), max(dy2)),
axes = F, xlab = xlab, ylab = ylab, main = main,type="n", ...)
## Ajoute mediane
confshade(IQX, rep(0., length(IQX)), IQy, col = "#bdfcc9")
bdw <- (tquX - fquX)/20.
x1 <- c(medX - bdw/2., medX - bdw/2.)
x2 <- c(medX + bdw/2., medX + bdw/2.)
y1 <- c(0., medy)
## Ajoute lignes wiskers
polygon(c(x1, rev(x2)), c(y1, rev(y1)), col = 0.)
lines(x = c(fquX, fquX), y = c(0., fquy))
## Ajoute wiskers
lines(x = c(tquX, tquX), y = c(0., tquy))
meany <- mean(dy2)
IQrange <- tquX - fquX
lines(x = c(medX - range * IQrange, fquX), y = c(meany, meany))
lines(x = c(tquX, medX + range * IQrange), y = c(meany, meany))
lines(x = c(medX - range * IQrange, medX - range * IQrange),
y = c(meany - (max(dy2) - min(dy2))/8., meany + (max(dy2) - min(dy2))/8.))
## Ajoute outliers
lines(x = c(medX + range * IQrange, medX + range * IQrange),
y = c(meany - (max(dy2) - min(dy2))/8., meany + (max(dy2) - min(dy2))/8.))
out <- c(X[X < medX - range * IQrange], X[X > medX + range * IQrange])
## Ajoute les points...
## Ajoute l'axe
points(out, rep(meany, length(out)), pch = 5., col = 2.)
## Ajoute l'axe
points(dx2, dy2, pch = ".", type = "l")
##return(x = dessinx2, y = dessiny2)
axis(1., at = round(c(min(x), fquX, medX, tquX, max(x)), 2.), labels = F,
pos = 0.)
invisible(list(x = dx2, y = dy2))
}
BoxDens <- function(data, npts = 200., x = c(0., 100.), y = c(0., 50.), orientation = "paysage",
add = TRUE, col = 11., border=FALSE,colline = 1., Fill = TRUE)
{
dens <- density(data, n = npts)
dx <- dens$x
dy <- dens$y
if(add == FALSE)
plot(0., 0., axes = F, main = "", xlim = x, ylim = y, xlab = "",
ylab = "")
if(orientation == "paysage") {
dx2 <- (dx - min(dx))/(max(dx) - min(dx)) * (x[2.] - x[1.]) * 0.98 +
x[1.]
dy2 <- (dy - min(dy))/(max(dy) - min(dy)) * (y[2.] - y[1.]) * 0.98 +
y[1.]
seqbelow <- rep(y[1.], length(dx))
if(Fill == T)
confshade(dx2, seqbelow, dy2, col = col)
if (border==TRUE) points(dx2, dy2, type = "l", col = colline)
}
else {
dy2 <- (dx - min(dx))/(max(dx) - min(dx)) * (y[2.] - y[1.]) * 0.98 +
y[1.]
dx2 <- (dy - min(dy))/(max(dy) - min(dy)) * (x[2.] - x[1.]) * 0.98 +
x[1.]
seqleft <- rep(x[1.], length(dy))
if(Fill == T)
confshade2(dy2, seqleft, dx2, col = col)
if (border==TRUE) points(dx2, dy2, type = "l", col = colline)
}
polygon(x = c(x[1.], x[2.], x[2.], x[1.]),
y = c(y[2.], y[2.], y[1.], y[1.]), density = 0.)
}
data(swiss)
## png(file="swiss.png", width=600,height=400)
plotacpclust(swiss[,1:5], 1, 3, hcut=48)
## dev.off()
help("[[")
clear
clear
R.version.string
install.packages("swirl")
library(swirl)
ls()
class(ls())
rm(list=ls())
ls()
ls()
swirl
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1 ,2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
swirl()
1:20
pi:10
15:1
?`:`
seq(1:20)
seq(1,20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
new_vec (1 , 50, length=N)
new_vec <- (1 , 50, length=N)
new_vec <- (1, 50, length=N)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
exit
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
main()
num_vect <- c(8.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf = num_vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
c("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- paste(my_char, "Steve", collapse = " ")
my_name <- c(my_char, "Steve")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
swirl()
swirl()
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
| x[!is.na(x) & x > 0]
x[!is.na(x) & x > 0]
c(x[3], x[5], x[7])
x[c(3, 5, 7)]
x[0]
x[300]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vert2) <- c("foo", "bar", "norf")
vert2
swirl()
names(vect2) <- c("foo", "bar",
| "norf")
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vert2)
vert2
?indentical
?identical
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix2, my_matrix)
?identical
?identical()
class(my_matrix)
identical(my_matrix, my_matrix2)
patients <- c("bill", "gina", "kelly", "sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <= cnames
colnames(my_data) <- cnames
my_data
0
exit
0
1:20
search()
getwd()
make.power <- function(n {})
make.power <- function(n) {
pow (x) {
x^n
}
pow
}
make.power <- function(n) {
pow function(x) {
x^n
}
pow
}
make.power <- function(n) {
pow function(x) {
x^n
}
pow
}
make.power <- function(n) {
pow function(x) {
x^n
}
pow
}
make.power <- function(n) {
pow function(x) {
x^n
}
pow
}
cube <- make.power(3)
make.power <- function(n) {
pow function(x) {
x^n
}
pow}
getwd()
setwd("/Users/stevedubois1/Desktop")
make.power <- function(n) {
pow function(x) {
x^n
}
pow}
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow}
cube <- make.power(3)
square <- make.power(2)
cube(3)
square(2)
mean(a)
a <- c(1.2, 33.89, 4, 47)
mean(a)
?solve
getwd()
setwd("/Users/stevedubois1/ProgrammingAssignment2")
ls
?iris
library(datasets)
data(iris)
datairis <- data(iris)
datairis
iris
?data
class(iris)
colnnames(iris)
colnames(iris)
iris$species
iris["species"]
iris[,"species"]
head(airquality)
airquality$Day
iris$Species
head(iris)
subiris <- iris[Sepal.Length, Species == virginia]
subiris <- iris[Sepal.Length, "Species" == virginia]
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
apply(iris, 1, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
library(datasets)
data(mtcars)
mtcars
with(mtcars, tapply(mpg, cyl, mean))
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
debug(ls)
is(ls)
is(ls, function)
is(ls, class2
is(ls, class2)
is(ls)
ls
is(ls, integer)
class(mtcars)
class(ls)
is(ls, data.frame)
is(ls, matrix)
ls
is(ls)
with(mtcars, tapply(mpg, cyl, mean))
absdiff <- with(mtcars, tapply(mpg, cyl, mean))
absdiff <- with(mtcars, tapply(mpg, cyl, mean))
absdiff
colnames(absdiff)
colnames(absdiff)
absdiff
absdiff[1]
x <- absdiff[1]
y <- absdiff[3]
head(mtcars)
with(mtcars, tapply(hp, cyl, mean))
hsavg <- with(mtcars, tapply(hp, cyl, mean))
head(iris)
comp <- iris[iris$Species %in% c("virginica"), iris$Sepal.Length]
iris$Sepal.Length
iris$Species %in% c("virginica")
iris$Species %in% "virginica"
iris[iris$Species %in% "virginica", iris$Sepal.Length]
iris$Species = "virginica"
iris$Species
iris$Species != "virginica"
d <- c(iris$Sepal.Length, iris$Species != "virginica")
d
iris$Species
c(iris$Sepal.Length
iris$Sepal.Length
d <- c(iris$Sepal.Length, iris$Species = "virginica")
d <- c(iris$Sepal.Length, iris$Species = "virginica")
d <- c(iris$Sepal.Length, iris$Species = "virginica")
d <- c(iris$Sepal.Length, iris$Species != "virginica")
d <- c(iris$Sepal.Length, iris$Species == "virginica")
iris$Species
d <- c(iris$Sepal.Length, c(iris$Species))
d
iris$Sepal.Length
summary(iris)
str(iris)
subiris <- iris[, "Species" == virginia]
subiris <- iris[, Species == "virginia"]
iris[Sepal.Length]
iris["Sepal.Length"]
iris["Sepal.Length", ]
iris[["Sepal.Length", ]]
iris[["Sepal.Length", "Species" != virginica]
iris[["Sepal.Length", "Species" != "virginica"]
iris[["Sepal.Length", Species != "virginica"]
iris[["Sepal.Length", Species != virginica]
iris[["Sepal.Length", Species != c("virginica"]
iris[["Sepal.Length", Species != c("virginica")]
iris$Species != "virginica"
y <- c("setosa", "versicolor")
y <- c("setosa", "versicolor")
iris["Sepal.Length", y]
iris["Sepal.Length", 5]
iris[, 5]
iris
iris$Sepal.Length
mean(iris$Sepal.Length)
library(datasets)
data(iris)
iris
head(iris)
library(datasets)
load(iris)
iris$Species
detach("package:graphics", unload=TRUE)
library("graphics", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(datasets)
load(iris)
data(iris)
head(iris)
iris
iris[101:150, 1]
mean(iris[101:150, 1])
head[mtcars]
install.packages("datasets")
library(datasets)
data(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
str(mtcars)
with(mtcars, tapply(hp, cyl, mean))
class(with(mtcars, tapply(hp, cyl, mean)))
x <- with(mtcars, tapply(hp, cyl, mean))
str(y)
y
with(mtcars, tapply(hp, cyl, mean))
y <- with(mtcars, tapply(hp, cyl, mean))
y
str(y)
summary(y)
x <- c(y)
x
class(x)
x <- as.matrix(c(y))
x
x <- as.data.frame(c(y))
xx
x
x <- c(y)
x
x[1]
abs(x[1]-x[3])
x[1]-x[3]
debug(ls)
ls()
debug(head)
head()
head
debug(ls)
ls
ls()
debug(ls)
ls()
ls()
ls()
ls()
ls()
debug(ls)
ls()
debug(ls)
ls()
debug(ls)
ls
debug(ls)
unbug(ls)
undebug(ls)
ls
ls()
debug(ls)
ls()
ls()
ls
clear
clr
debug(ls)
ls()
ret
RET
ls
RET
where
undebug
install.packages("datasets")
debug(mean)
debug(ls)
ls
